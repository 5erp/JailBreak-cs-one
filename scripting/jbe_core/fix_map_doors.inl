IN_HANDLED
}
#endif

fix_buttons_load_file()
{

}

fix_buttons_save_file()
{

}

new Array:g_aFixButtonsMenu;
new Array:g_aFixBadDoors;
new g_iFixButtonMenu; // menu id
new g_iAdminEditDoorsID;

check_fix_button_menu_init()
{
	if (g_iFixButtonMenu) return;

	register_menucmd(register_menuid("Show_FixButtonMenu"),
		(1<<0|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9), "Handle_FixButtonMenu");

	g_aFixButtonsMenu = ArrayCreate();
	g_aFixBadDoors = ArrayCreate();
}

public ClCmd_FixButtonMenu(id)
{
	
}

Cmd_FixButtonMenu(id) return Show_FixButtonMenu(id, g_iMenuPosition[id] = 0);
Show_FixButtonMenu(id, iPos)
{
	menu_title("Fix Map Doors");

	menu_item("\r[\y\r] \wВыбрать (прицел)^n");
	menu_item("\r[\y\r] \wОткрыть/Закрыть^n");
	menu_item("\r[\y\r] \wДобавить в список^n");
	menu_item("\r[\y\r] \wЗаблокировать дверь^n");
	menu_item("\r[\y\r] \wОчистить список дверей^n");
	menu_item("\r[\y\r] \wОчистить заблокированные^n");
	menu_item("\r[\y\r] \wПерезаписать файл^n");
	menu_item("\r[\y\r] \w^n");

	return menu_show(id, (1<<0), "Show_FixButtonMenu");
}

public Handle_FixButtonMenu(id, iKey)
{
	switch (iKey)
	{
		case 0: admin_get_entity_id(id);
		case 1: admin_use_entity_id(id);
		case 2: admin_add_button_list(id);
		case 3: admin_add_bad_door_list(id);
		case 4: ArrayClear(g_aFixButtonsMenu);
		case 5: ArrayClear(g_aFixBadDoors);
		case 6: admin_fix_doors_save_file();
	}
}

admin_get_entity_id(id)
{
	new iEntity, iBody;
	get_user_aiming(id, iEntity, iBody); //get_user_aiming( id, iEntity, iBody, 9999);
	
	if (pev_valid(iEntity))
	{
		g_iMenuTarget[id] = iEntity;
		new szModel[5], szClassName[32];

		pev(iEntity, pev_model, szModel, charsmax(szModel));
		pev(iEntity, pev_classname, szClassName, charsmax(szClassName));
		
		client_print(id, print_chat, "entity id: %i | model: %s | name: %s",
			iEntity, szModel, szClassName);
	}
	return PLUGIN_HANDLED;
}

admin_use_entity_id(id)
{
	if (!pev_valid(g_iMenuTarget[id]))
	{
		client_print(id, print_chat, "No valid entity %d", g_iMenuTarget[id]);
		return PLUGIN_HANDLED;
	}
	
	force_use(id, g_iMenuTarget[id]);
	
	client_print(id, print_chat, "used entity id: %d", g_iMenuTarget[id]);
	
	return PLUGIN_HANDLED;
}

admin_add_button_list(id)
{
	ArrayPushCell(g_aFixButtonsMenu, g_iMenuTarget[id]);
}

admin_add_bad_door_list(id)
{
	ArrayPushCell(g_aFixBadDoors, g_iMenuTarget[id]);
}

admin_fix_doors_save_file(id)
{
	if (file_exists(filename))
		delete_file(filename);

	new iSizeDoors = ArraySize(g_aFixButtonsMenu);
	new iSizeBadDoors = ArraySize(g_aFixBadDoors);

	if (!iSizeDoors && !iSizeBadDoors)
	{
		client_print(id, print_chat, "file deleted, empty fix doors list");
		return 0;
	}

	if (!write_file(filename, ";Generated by JBE Fix Doors. Do not modify!^n;Title Filename^n^n"))
	{
		client_print(id, print_chat, "erroe write file");
		return 0;
	}

	new i, iDoor;

	if (iSizeDoors)
	{
		write_file(filename, "[FIX DOORS]^n");
		for (i = 0, i < iSizeDoors; i++)
		{
			iDoor = ArrayGetCell(g_aFixButtonsMenu, i);
			write_file(filename, "%d^n", iDoor);
		}
	}

	write_file(filename, "^n");

	if (iSizeBadDoors)
	{
		write_file(filename, "[BAD DOORS]^n");
		for (i = 0, i < iSizeBadDoors; i++)
		{
			iDoor = ArrayGetCell(g_aFixBadDoors, i);
			write_file(filename, "%d^n", iDoor);
		}
	}

	client_print(id, print_chat, "succesfull save file");

	ArrayDestroy(g_aFixButtonsMenu);
	ArrayDestroy(g_aFixBadDoors);

	return 1;
}